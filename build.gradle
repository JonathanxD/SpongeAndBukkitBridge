plugins {
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

group 'com.github.jonathanxd'
version '1.0-SNAPSHOT'

allprojects.forEach({ proj ->
    println("Proj $proj")
})

allprojects {
    apply plugin: "idea"
    apply plugin: 'java'
    apply plugin: 'license'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'

    license {
        header rootProject.file("LICENSE_HEADER")
    }
}

defaultTasks 'licenseFormat', 'build', 'test', 'jar', 'shadowJar'

sourceCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }        
        resources {
            srcDirs 'src/main/resources'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Setup

ext {
    description = "Sponge & Bukkit Bridge - A Plugin API!"
}

project(':BukkitSBB').version = "1.0-SNAPSHOT"
project(':BukkitSBB').group = 'com.github.jonathanxd'

project(':BukkitSBB') {
    ext {
        description = "Bukkit Implementation of SpongeAndBukkitBridge"
    }
    repositories {
        maven {
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            url 'http://maven.elmakers.com/repository/'
        }
    }
    dependencies {
        compile group: 'org.spigotmc', name: 'spigot-api', version: '1.9-R0.1-SNAPSHOT'
    }
}

project(':SpongeSBB').version = "1.0-SNAPSHOT"
project(':SpongeSBB').group = 'com.github.jonathanxd'

project(':SpongeSBB') {
    ext {
        description = "Sponge Implementation of SpongeAndBukkitBridge"
    }
    repositories {
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }

    dependencies {
        compile 'org.spongepowered:spongeapi:4.0.3'
    }
}


allprojects {
    shadowJar {
        dependencies {
            include(dependency(":Interceptor:1.0-SNAPSHOT"))
        }
    }
}

subprojects {

    shadowJar {
        dependencies {
            include(project(rootProject.getPath()))
        }
    }
}

// Tasks
allprojects {
    jar {
        from "$rootProject.rootDir/LICENSE"

        manifest {
            attributes 'Implementation-Title': baseName,
                    'Implementation-Version': version
        }
    }
}



allprojects {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

subprojects {

    dependencies {
        compile rootProject
        testCompile rootProject.sourceSets.test.output
    }
}



allprojects{
    dependencies {
        compile name: 'Interceptor', version: '1.0-SNAPSHOT'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
        testCompile group: 'junit', name:'junit', version: '4.11'
    }
}

allprojects{
    repositories {
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
    repositories {
        flatDir {
            dirs "$rootProject.rootDir/libs/interceptor"
        }
    }


}

allprojects {
    test {
        useJUnit()
    }
}

allprojects{
    license {
        String name = project.getName()
        String description = project.ext.description

        ext.name = "$name"//'SpongeAndBukkitBridge'
        ext.organization = 'TheRealBuggy/JonathanxD (https://github.com/JonathanxD/ & https://github.com/TheRealBuggy/)'
        ext.description = "$description"
        ext.url = 'https://github.com/JonathanxD/WCommands'
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.email = 'jonathan.scripter@programmer.net'

        exclude "**/*.info"
        exclude "**/*.md"
        exclude "res/**"
        exclude "src/main/resources/**"
        exclude "src/test/resources/**"

        header rootProject.file('LICENSE_HEADER')

        sourceSets = project.sourceSets

        ignoreFailures false
        strictCheck true

        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}
